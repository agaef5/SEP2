package server.networking.socketHandling;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonSyntaxException;

import java.sql.SQLException;

/**
 * {@code BaseRequestHandler} is an abstract class that implements common functionality for handling requests.
 * It provides a method for safely processing incoming requests with proper error handling.
 */
public abstract class BaseRequestHandler implements RequestHandler {
  protected final Gson gson = new Gson();

  /**
   * Handles the request action by parsing the payload and passing it to the {@code safeHandle} method.
   *
   * @param action The action to be processed.
   * @param payload The payload associated with the request.
   * @return The response object generated by processing the request.
   * @throws IllegalArgumentException if there are errors in the payload or missing required fields.
   * @throws RuntimeException if an unexpected error occurs during the request handling.
   */
  @Override
  public final Object handle(String action, JsonElement payload) {
    try {
      return safeHandle(action, payload);
    } catch (JsonSyntaxException e) {
      throw new IllegalArgumentException("Malformed JSON payload: " + e.getMessage(), e);
    } catch (NullPointerException e) {
      throw new IllegalArgumentException("Missing required fields in payload: " + e.getMessage(), e);
    } catch (IllegalArgumentException e) {
      // Pass through IllegalArgumentException with action-related issues
      throw e;
    } catch (Exception e) {
      throw new RuntimeException("Unexpected error handling request: " + e.getMessage(), e);
    }
  }

  /**
   * Parses the payload into a Java object of the specified class.
   *
   * @param payload The JSON payload to be parsed.
   * @param clazz The class type to which the payload should be converted.
   * @param <T> The type of the object.
   * @return The parsed object.
   * @throws IllegalArgumentException if the payload structure does not match the specified class.
   */
  protected <T> T parsePayload(JsonElement payload, Class<T> clazz) {
    try {
      return gson.fromJson(payload, clazz);
    } catch (JsonSyntaxException | NullPointerException e) {
      throw new IllegalArgumentException("Invalid payload structure for " + clazz.getSimpleName(), e);
    }
  }

  /**
   * This method should be implemented by subclasses to handle the request with the given action and payload.
   *
   * @param action The action to be processed.
   * @param payload The payload associated with the request.
   * @return The response object generated by processing the request.
   */
  protected abstract Object safeHandle(String action, JsonElement payload) throws SQLException;
}
