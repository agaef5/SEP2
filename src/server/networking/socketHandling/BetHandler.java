package server.networking.socketHandling;

import client.ui.util.ErrorHandler;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import server.model.Bet;
import server.services.bet.BetService;
import server.services.bet.BetServiceImpl;
import server.util.DTOMapper;
import shared.DTO.BetDTO;
import shared.DTO.BetResponseDTO;
import shared.DTO.RaceDTO;
import shared.DTO.UserDTO;
import shared.bet.CreateBetRequest;
import shared.bet.CreateBetResponse;
import shared.bet.GetBetHistoryOfUserRequest;

import java.io.IOException;
import java.sql.SQLException;

public class BetHandler extends BaseRequestHandler {
    private final BetService betService;
    private final Gson gson;

    public BetHandler()
    {
        this.betService = BetServiceImpl.getInstance();
        this.gson= new Gson();
    }

    /**
     * This method handles various actions related to bet based on the provided action string.
     * Each action corresponds to a specific bet-related operation, which is delegated
     * to the appropriate method for processing.
     *
     * @param action The action to be performed (e.g., "createBet").
     * @param payload The payload containing necessary data for the action.
     * @return The response generated after processing the request.
     * @throws IllegalArgumentException If the action is invalid.
     */
    @Override
    public Object safeHandle(String action , JsonElement payload) throws SQLException
    {
        switch(action){
            case "createBet"->{
                CreateBetRequest request = parsePayload(payload,CreateBetRequest.class);
                return handleCreateBetRequest(request);
            }
            case "getBetListByUser" ->{
                GetBetHistoryOfUserRequest request = parsePayload(payload,GetBetHistoryOfUserRequest.class);
                return handleGetBetHistoryOfUser(request);

            }
            default -> throw new IllegalArgumentException("Invalid action "+action);
        }

    }

    /**
     * Handles the request to create bet from the client.
     * @param request {@link CreateBetRequest} - the request payload
     * @returns an Object, which is actually a {@link CreateBetResponse}
     */
    private Object handleCreateBetRequest(CreateBetRequest request){
        // Get the bet from the service
        Bet bet = betService.createBet(
                request.username(),
                request.horseDTO(),
                request.amount()
        );

        // Convert directly to the response DTO
        BetResponseDTO responseDTO = DTOMapper.betToResponseDTO(bet);

        // Return the response
        return new CreateBetResponse(responseDTO);
    }


    /**
     * Get a list of bets placed by the user.
     *
     * @param request {@link GetBetHistoryOfUserRequest}
     * @return response generated by {@link BetService}
     */
    private Object handleGetBetHistoryOfUser(GetBetHistoryOfUserRequest request) {
        return betService.getBetsByUser(request.username());
    }

}
